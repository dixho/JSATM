"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const mysql = __importStar(require("mysql"));
const columns_1 = require("./columns");
const constants_1 = require("./constants");
class Blueprint {
    constructor(table) {
        this.charset = 'utf8';
        this.collate = 'utf8_unicode_ci';
        this.columns = [];
        this.primaryKey = 'id';
        this.table = table;
    }
    bigInteger(name, options = {}) {
        this.columns.push(new columns_1.IntegerColumn(name, constants_1.ColumnType.BIG_INTEGER, options));
    }
    blob(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.BLOB));
    }
    char(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.CHAR));
    }
    date(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.DATE));
    }
    dateTime(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.DATETIME));
    }
    decimal(name, options = {}) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.DECIMAL, options));
    }
    double(name, options = {}) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.DOUBLE, options));
    }
    enum(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.ENUM));
    }
    float(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.FLOAT));
    }
    integer(name, options = {}) {
        this.columns.push(new columns_1.IntegerColumn(name, constants_1.ColumnType.INTEGER, options));
    }
    longText(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.LONG_TEXT));
    }
    mediumInteger(name, options = {}) {
        this.columns.push(new columns_1.IntegerColumn(name, constants_1.ColumnType.MEDIUM_INTEGER, options));
    }
    mediumText(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.MEDIUM_TEXT));
    }
    smallInteger(name, options = {}) {
        this.columns.push(new columns_1.IntegerColumn(name, constants_1.ColumnType.SMALL_INTEGER, options));
    }
    text(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.TEXT));
    }
    time(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.TIME));
    }
    timetamp(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.TIMESTAMP));
    }
    tinyInteger(name, options = {}) {
        this.columns.push(new columns_1.IntegerColumn(name, constants_1.ColumnType.TINY_INTEGER, options));
    }
    varchar(name, options = {}) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.VARCHAR, options));
    }
    year(name) {
        this.columns.push(new columns_1.Column(name, constants_1.ColumnType.YEAR));
    }
    compile() {
        const expressions = [];
        expressions.push('CREATE TABLE', mysql.escapeId(this.table), '(');
        expressions.push(this.columns.map(column => column.toString()).join(', '));
        expressions.push(',', 'PRIMARY KEY', '(', mysql.escapeId(this.primaryKey), ')');
        expressions.push(')');
        expressions.push('DEFAULT CHARSET', this.charset);
        expressions.push('COLLATE', this.collate);
        return expressions.join(' ').trim();
    }
}
exports.default = Blueprint;
