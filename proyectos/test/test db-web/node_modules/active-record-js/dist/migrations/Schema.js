"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mysql = __importStar(require("mysql"));
const Blueprint_1 = __importDefault(require("./Blueprint"));
const connection_1 = require("../connection");
class Schema {
    static async createTable(table, fn) {
        const blueprint = new Blueprint_1.default(table);
        fn(blueprint);
        return await this.run(blueprint.compile());
    }
    static async drop(table) {
        return await this.run(`DROP TABLE ${mysql.escapeId(table)}`);
    }
    static async dropIfExists(table) {
        return await this.run(`DROP TABLE IF EXISTS ${mysql.escapeId(table)}`);
    }
    static async hasColumn(table, column) {
        const results = await connection_1.DB.run(`SHOW COLUMNS FROM ${mysql.escapeId(table)} LIKE ${mysql.escape(column)}`);
        return results.length !== 0;
    }
    static async hasTable(table) {
        const results = await connection_1.DB.run(`SHOW TABLES LIKE ${mysql.escape(table)}`);
        return results.length !== 0;
    }
    static async run(query) {
        try {
            await connection_1.DB.run(query);
        }
        catch (error) {
            return false;
        }
        return true;
    }
}
exports.default = Schema;
