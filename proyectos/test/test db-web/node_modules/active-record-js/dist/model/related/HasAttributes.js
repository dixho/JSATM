"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const casts_1 = require("../../utils/casts");
class HasAttributes {
    constructor() {
        this.appends = [];
        this.attributes = {};
        this.changedAttributes = [];
    }
    clearChangedAttributes() {
        this.changedAttributes = [];
    }
    fillAttributes(attributes, exists = false) {
        for (const key in attributes) {
            if (exists) {
                if (this.constructor['casts'].hasOwnProperty(key)) {
                    this.attributes[key] = casts_1.casts[this.constructor['casts'][key]](attributes[key]);
                }
                else {
                    this.attributes[key] = attributes[key];
                }
            }
            else {
                this.setAttribute(key, attributes[key]);
            }
        }
    }
    getAccessorProperty(key) {
        return this[`${key}Attribute`](this.attributes);
    }
    getAttribute(key) {
        if (this.isAccessorProperty(key)) {
            return this.getAccessorProperty(key);
        }
        return this.attributes[key];
    }
    getAttributes() {
        return this.attributes;
    }
    getDirtyAttributes() {
        const attributes = {};
        this.changedAttributes.forEach((attribute) => {
            attributes[attribute] = this.attributes[attribute];
        });
        return attributes;
    }
    isAccessorProperty(key) {
        if (typeof key === 'symbol') {
            return false;
        }
        return typeof this[`${key}Attribute`] !== 'undefined';
    }
    isAttribute(key) {
        return this.attributes.hasOwnProperty(key) || this.isAccessorProperty(key);
    }
    isDirty() {
        return this.changedAttributes.length > 0;
    }
    setAttribute(key, value) {
        if (this.attributes[key] !== value && this.changedAttributes.indexOf(key) === -1) {
            this.changedAttributes.push(key);
        }
        this.attributes[key] = value;
    }
}
exports.default = HasAttributes;
HasAttributes.casts = {};
