import { Builder } from '../query';
import { HasAttributes, HasRelationships, HasTimestamps, HidesAttributes } from './related';
interface ProxyType {
    [name: string]: any;
}
declare class Model implements HasAttributes, HasRelationships, HasTimestamps, HidesAttributes, ProxyType {
    [property: string]: any;
    CREATED_AT: string;
    UPDATED_AT: string;
    static casts: object;
    static hidden: Array<string>;
    attributes: object;
    appends: Array<string>;
    changedAttributes: Array<string>;
    timestamps: boolean;
    belongsTo: (related: string, foreignKey: string, localKey?: string) => any;
    belongsToMany: (related: string, pivot: string, foreignPivotKey?: string, localPivotKey?: string) => any;
    clearChangedAttributes: () => void;
    fillAttributes: (attributes: object, exits: boolean) => void;
    getAccessorProperty: (key: string | number) => any;
    getAttribute: (key: string | number) => any;
    getAttributes: () => any;
    getDirtyAttributes: () => object;
    getHidden: () => Array<string>;
    hasMany: (related: string, foreignKey: string, localKey?: string) => any;
    hasOne: (related: string, foreignKey: string, localKey?: string) => any;
    isAccessorProperty: (key: number | string) => boolean;
    isAttribute: (key: number | string) => boolean;
    isDirty: () => boolean;
    setAttribute: (key: string, value: any) => void;
    setCreatedAt: (timestamp: string) => any;
    setHidden: (keys: Array<string>) => void;
    setUpdatedAt: (timestamp: string) => any;
    static table: string;
    id: any;
    protected exists: boolean;
    protected incrementing: boolean;
    protected primaryKey: string;
    constructor(attributes?: object, exists?: boolean);
    static all(): Promise<any>;
    private applyRelations;
    delete(): Promise<boolean>;
    equals(instance: any): boolean;
    static findById(id: number): Promise<any>;
    static saveMany(rows: Array<object>): Promise<any>;
    private newModelQuery;
    private performInsert;
    private performUpdate;
    save(): Promise<boolean>;
    static select(select: Array<string>): Builder;
    toJSON(): {};
    static where(column: string, operator: string, value: number | string): Builder;
    static whereIn(column: string, value: Array<number | string>): Builder;
}
export default Model;
