import { PaginateObject } from '../libraries/Pagination';
import { Order, Where } from './expressions';
export default class Builder {
    model: string;
    isDistinct: boolean;
    isFirst: boolean;
    rawSelects: Array<string>;
    selects: Array<string>;
    fromTable: string;
    groups: Array<any>;
    havings: Array<any>;
    joins: Array<any>;
    limits: number;
    offsets: number;
    orders: Array<Order>;
    updates: object;
    wheres: Array<Where>;
    private compiler;
    constructor();
    count(): Promise<any>;
    delete(attributes?: {}): Promise<void>;
    distinct(): Builder;
    first(): Promise<any>;
    from(table: string): Builder;
    get(): Promise<any>;
    groupBy(groups: Array<string>): Builder;
    insert(attributes: object): Promise<number>;
    insertMany(rows: Array<object>): Promise<any>;
    join(table: string, localKey: string, operator: string, foreignKey: string): Builder;
    leftJoin(table: string, localKey: string, operator: string, foreignKey: string): Builder;
    limit(limit: number): Builder;
    setModel(model: string): Builder;
    offset(offset: number): Builder;
    orderBy(column: string, direction?: string): Builder;
    orWhere(column: string, operator: string, value: number | string): Builder;
    paginate(options: any): Promise<PaginateObject>;
    rightJoin(table: string, localKey: string, operator: string, foreignKey: string): Builder;
    select(selects: Array<string>): Builder;
    setIsFirst(isFirst: boolean): Builder;
    toSql(): string;
    private transformRows;
    update(updates: any): Promise<any>;
    where(column: string, operator: string, value: number | string): Builder;
    whereIn(column: string, value: Array<number | string>): Builder;
}
